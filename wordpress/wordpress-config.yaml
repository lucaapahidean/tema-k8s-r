apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  setup.sh: |
    #!/bin/bash
    set -e
    
    echo "🚀 Starting automated WordPress installation..."
    
    # Extract host and port
    DB_HOST=$(echo "$WORDPRESS_DB_HOST" | cut -d: -f1)
    DB_PORT=$(echo "$WORDPRESS_DB_HOST" | cut -d: -f2)
    
    echo "⏳ Waiting for $DB_HOST:$DB_PORT to be ready..."
    
    # Wait for database port
    for i in $(seq 1 60); do
        if timeout 1 bash -c "</dev/tcp/$DB_HOST/$DB_PORT" 2>/dev/null; then
            echo "✅ Database port $DB_HOST:$DB_PORT is open!"
            break
        fi
        echo "Attempt $i/60 - waiting for $DB_HOST:$DB_PORT..."
        sleep 2
    done
    
    # Additional wait for MySQL to be fully ready
    echo "⏳ Waiting extra 15 seconds for MySQL initialization..."
    sleep 15
    
    cd /var/www/html
    
    # Use a lock file to ensure only one pod does the setup
    LOCK_FILE="/var/www/html/.setup-lock"
    SETUP_COMPLETE_FILE="/var/www/html/.setup-complete"
    
    # Function to safely install WP-CLI
    install_wp_cli() {
        if [ ! -f /usr/local/bin/wp ]; then
            echo "📦 Installing WP-CLI..."
            curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar 2>/dev/null
            if [ -f wp-cli.phar ]; then
                chmod +x wp-cli.phar
                mv wp-cli.phar /usr/local/bin/wp
            fi
        fi
    }
    
    # Wait for any ongoing setup to complete
    while [ -f "$LOCK_FILE" ] && [ ! -f "$SETUP_COMPLETE_FILE" ]; do
        echo "⏳ Another pod is setting up WordPress, waiting..."
        sleep 5
    done
    
    # If setup is already complete, exit
    if [ -f "$SETUP_COMPLETE_FILE" ]; then
        echo "✅ WordPress setup already completed by another pod"
        exit 0
    fi
    
    # Try to acquire lock (atomic operation)
    if mkdir "$LOCK_FILE" 2>/dev/null; then
        echo "🔒 Acquired setup lock - this pod will handle WordPress setup"
        
        # Ensure cleanup on exit
        trap 'rm -rf "$LOCK_FILE"' EXIT
        
        # Install WP-CLI
        install_wp_cli
        
        # Check if WordPress is properly installed (not just wp-config.php exists)
        WP_INSTALLED=false
        if [ -f wp-config.php ]; then
            echo "📄 wp-config.php found, checking if WordPress is fully installed..."
            if wp core is-installed --allow-root 2>/dev/null; then
                echo "✅ WordPress core is properly installed"
                WP_INSTALLED=true
            else
                echo "⚠️ wp-config.php exists but WordPress is not properly installed"
            fi
        fi
        
        if [ "$WP_INSTALLED" = "false" ]; then
            echo "🏗️ Setting up WordPress..."
            
            # Get Node IP for site URL
            NODE_IP="${KUBERNETES_NODE_IP:-localhost}"
            SITE_URL="http://$NODE_IP:30080"
            
            if [ ! -f wp-config.php ]; then
                echo "📥 Downloading WordPress core..."
                wp core download --allow-root
                
                echo "🔧 Creating wp-config.php..."
                wp config create \
                    --dbname="$WORDPRESS_DB_NAME" \
                    --dbuser="$WORDPRESS_DB_USER" \
                    --dbpass="$WORDPRESS_DB_PASSWORD" \
                    --dbhost="$WORDPRESS_DB_HOST" \
                    --allow-root
            fi
            
            echo "🗄️ Installing WordPress (creating database tables)..."
            wp core install \
                --url="$SITE_URL" \
                --title="Cloud-Native Demo Platform" \
                --admin_user="admin" \
                --admin_password="admin123" \
                --admin_email="admin@example.com" \
                --skip-email \
                --allow-root
            
            echo "🎨 Setting up theme..."
            wp theme install twentytwentyfour --activate --allow-root 2>/dev/null || echo "Theme already installed"
            
            # Update site URLs
            wp option update home "$SITE_URL" --allow-root
            wp option update siteurl "$SITE_URL" --allow-root
        else
            echo "📄 WordPress core already properly installed"
            # Get Node IP for site URL
            NODE_IP="${KUBERNETES_NODE_IP:-localhost}"
            SITE_URL="http://$NODE_IP:30080"
        fi
        
        # Check if integration page exists
        echo "🔍 Checking for integration page..."
        EXISTING_PAGE=$(wp post list --post_type=page --title="Integrated Platform" --format=ids --allow-root 2>/dev/null || echo "")
        
        if [ -z "$EXISTING_PAGE" ]; then
            echo "📄 Creating integration homepage..."
            
            # Create page with basic content first, then update with full content
            HOMEPAGE_ID=$(wp post create \
                --post_type=page \
                --post_title="Integrated Platform" \
                --post_status=publish \
                --post_content="<h1>Loading...</h1>" \
                --format=ids \
                --allow-root)
            
            echo "📝 Updating page content..."
            
            # Update with full content using WordPress's content replacement
            wp post update $HOMEPAGE_ID \
                --post_content='<div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 40px; border-radius: 8px; margin-bottom: 30px; text-align: center;"><h1>🚀 Cloud-Native Demo Platform</h1><p style="font-size: 1.2em; margin: 0;">Complete Kubernetes deployment with WordPress, Chat, and AI applications</p></div><div style="display: grid; grid-template-columns: 1fr 1fr; gap: 30px; margin: 30px 0;"><div style="border: 2px solid #4caf50; padding: 25px; border-radius: 12px; text-align: center; background: #f8fff8;"><h2 style="color: #4caf50; margin-top: 0;">💬 Real-time Chat</h2><p>WebSocket-powered chat application with MongoDB persistence and Redis pub/sub</p><p><strong>Backend:</strong> Python + Nginx (2 replicas)<br><strong>Frontend:</strong> React (1 replica)</p></div><div style="border: 2px solid #2196f3; padding: 25px; border-radius: 12px; text-align: center; background: #f8f9ff;"><h2 style="color: #2196f3; margin-top: 0;">🤖 AI Image Analysis</h2><p>Azure Computer Vision integration with Blob Storage and SQL Database</p><p><strong>Features:</strong> Image upload, OCR, sentiment analysis<br><strong>Storage:</strong> Azure Blob + SQL</p></div></div><h2>💬 Chat Application</h2><div style="border: 2px solid #4caf50; border-radius: 8px; overflow: hidden; height: 600px; margin: 20px 0;"><iframe id="chat-iframe" src="" width="100%" height="100%" frameborder="0" style="border: none;"></iframe></div><h2>🤖 AI Image Analysis</h2><div style="border: 2px solid #2196f3; border-radius: 8px; overflow: hidden; height: 600px; margin: 20px 0;"><iframe id="ai-iframe" src="" width="100%" height="100%" frameborder="0" style="border: none;"></iframe></div><script>document.addEventListener("DOMContentLoaded", function() { const nodeIP = window.location.hostname; document.getElementById("chat-iframe").src = "http://" + nodeIP + ":30090"; document.getElementById("ai-iframe").src = "http://" + nodeIP + ":30092"; });</script><div style="background: #f5f5f5; padding: 25px; border-radius: 8px; margin-top: 30px;"><h2>🏗️ Technical Architecture</h2><div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;"><div><h3>💾 Backend Services</h3><ul><li><strong>WordPress CMS:</strong> 4 replicas with MySQL</li><li><strong>Chat Backend:</strong> Python+Nginx, 2 replicas</li><li><strong>MongoDB:</strong> Chat message persistence</li><li><strong>Redis:</strong> WebSocket state sharing</li><li><strong>AI Backend:</strong> Azure integration</li></ul></div><div><h3>🌐 Frontend Applications</h3><ul><li><strong>WordPress:</strong> Port 30080 (this site)</li><li><strong>Chat Frontend:</strong> React app on port 30090</li><li><strong>AI Frontend:</strong> React app on port 30092</li><li><strong>All integrated</strong> via iframe embedding</li></ul></div></div></div><div style="text-align: center; margin-top: 30px; padding: 20px; background: #e8f5e8; border-radius: 8px;"><h3>📊 System Information</h3><p><strong>Admin Panel:</strong> <a href="/wp-admin">WordPress Admin</a> (admin / admin123)</p><p><strong>Deployment:</strong> Fully automated Kubernetes with zero manual configuration</p></div>' \
                --allow-root
            
            echo "🏠 Setting homepage..."
            wp option update show_on_front page --allow-root
            wp option update page_on_front $HOMEPAGE_ID --allow-root
            
        else
            echo "✅ Integration page already exists (ID: $EXISTING_PAGE)"
        fi
        
        echo "🔐 WordPress Admin Credentials:"
        echo "   URL: $SITE_URL/wp-admin"
        echo "   Username: admin"
        echo "   Password: admin123"
        
        # Mark setup as complete
        touch "$SETUP_COMPLETE_FILE"
        echo "✅ WordPress fully configured with integrated platform page!"
        
    else
        echo "❌ Could not acquire setup lock - another pod is already setting up WordPress"
        # Wait for setup to complete
        while [ ! -f "$SETUP_COMPLETE_FILE" ]; do
            echo "⏳ Waiting for setup completion by primary pod..."
            sleep 5
        done
        echo "✅ Setup completed by primary pod"
    fi
    
    # Always fix permissions
    chown -R www-data:www-data /var/www/html 2>/dev/null || echo "Permission fix skipped"
    
    echo "🎉 Setup process complete!"